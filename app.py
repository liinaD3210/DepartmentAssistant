# app.py
import streamlit as st
import asyncio
from datetime import datetime, timedelta
import time

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä–≤—ã–º –≤—ã–∑–æ–≤–æ–º Streamlit) ---
st.set_page_config(
    page_title="DepartmentAssistant Demo",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded",
)

# --- –ò–º–ø–æ—Ä—Ç—ã –Ω–∞—à–µ–π –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∏ ---
# –ü–æ–º–µ—â–∞–µ–º –∏—Ö –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
from src.department_assistant.services import llm_router, faq_service, task_service
from src.department_assistant.core.models import Intent, TaskInfo, MeetingInfo

# --- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –∏ —Ö–µ–ª–ø–µ—Ä—ã ---
DEMO_CHAT_ID = -100123456789  # –§–∏–∫—Ç–∏–≤–Ω—ã–π ID –¥–ª—è –Ω–∞—à–µ–≥–æ –¥–µ–º–æ-—á–∞—Ç–∞

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–∞ –≤ Streamlit ---
if "history" not in st.session_state:
    # –ü—Ä–µ–¥–∑–∞–ø–æ–ª–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    st.session_state.history = [
        {"role": "bot_summary", "content": "üìù **–°–≤–æ–¥–∫–∞ –∑–∞ 22.06.2025:**\n- –û–±—Å—É–∂–¥–∞–ª–∏ –∑–∞–ø—É—Å–∫ –ø—Ä–æ–µ–∫—Ç–∞ '–û–º–µ–≥–∞'.\n- –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ #14 '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –º–∞–∫–µ—Ç—ã –¥–ª—è '–û–º–µ–≥–∞''.\n- –ù–∞–∑–Ω–∞—á–µ–Ω–∞ –≤—Å—Ç—Ä–µ—á–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Ä–∏—Å–∫–æ–≤."},
        {"role": "user", "name": "–ê–Ω–Ω–∞", "content": "–ö–æ–ª–ª–µ–≥–∏, –Ω—É–∂–Ω–æ —Å—Ä–æ—á–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤ –∫ —Å—Ä–µ–¥–µ!"},
        {"role": "bot", "content": "‚úÖ –ó–∞–¥–∞—á–∞ \"–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –∏–Ω–≤–µ—Å—Ç–æ—Ä–æ–≤\" —Å–æ–∑–¥–∞–Ω–∞ (ID: 15)."},
        {"role": "user", "name": "–î–∞–Ω–∏–∏–ª", "content": "–∫–∞–∫ –º–Ω–µ –≤–∑—è—Ç—å –æ—Ç–ø—É—Å–∫?"},
        {"role": "bot", "content": "–Ø –Ω–∞—à–µ–ª —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é: –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –µ–∂–µ–≥–æ–¥–Ω–æ–≥–æ –æ–ø–ª–∞—á–∏–≤–∞–µ–º–æ–≥–æ –æ—Ç–ø—É—Å–∫–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –¥–æ–ª–∂–µ–Ω –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ, —á–µ–º –∑–∞ 14 –∫–∞–ª–µ–Ω–¥–∞—Ä–Ω—ã—Ö –¥–Ω–µ–π –¥–æ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–π –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –æ—Ç–ø—É—Å–∫–∞. –ó–∞—è–≤–ª–µ–Ω–∏–µ –ø–æ–¥–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ—Ä—Ç–∞–ª 'MyAlpha'."}
    ]
if "user_input" not in st.session_state:
    st.session_state.user_input = ""


# --- –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å (Sidebar) ---
with st.sidebar:
    st.title("ü§ñ DepartmentAssistant")
    st.info(
        "–≠—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞. "
        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –≤ —á–∞—Ç–µ —Å–ø—Ä–∞–≤–∞."
    )
    
    with st.expander("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π"):
        st.code("–∫–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –æ—Ç–ø—É—Å–∫?")
        st.code("–∫–∞–∫–æ–π —É –Ω–∞—Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –Ω–æ—É—Ç–±—É–∫?")
        st.code("–∫–∞–∫ —á–∞—Å—Ç–æ –º–µ–Ω—è—Ç—å –ø–∞—Ä–æ–ª—å?")

    with st.expander("‚úîÔ∏è –°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É"):
        st.code("–Ω—É–∂–Ω–æ —Å–æ—Å—Ç–∞–≤–∏—Ç—å —Å–º–µ—Ç—É –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏ @daniil")
        st.code("–∑–∞–∫–∞–∑–∞—Ç—å –ø–∏—Ü—Ü—É –≤ –æ—Ñ–∏—Å –Ω–∞ 19:00")

    with st.expander("üìÖ –ù–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É"):
        st.code("–¥–∞–≤–∞–π—Ç–µ —Å–æ–∑–≤–æ–Ω–∏–º—Å—è –∑–∞–≤—Ç—Ä–∞ –≤ 11 –æ–±—Å—É–¥–∏—Ç—å –º–∞—Ä–∫–µ—Ç–∏–Ω–≥")

    with st.expander("‚öôÔ∏è –£–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏"):
        st.code("/tasks")
        st.code("/close 15")

    st.success("–í—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –≤—Å—Ç—Ä–µ—á–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Ä–µ–∞–ª—å–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å ---
st.header("–†–∞–±–æ—á–∏–π —á–∞—Ç –∫–æ–º–∞–Ω–¥—ã #general")

# --- –ì–ª–∞–≤–Ω–∞—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ---
async def process_user_input(user_input: str):
    st.session_state.history.append({"role": "user", "name": "–í—ã", "content": user_input})

    # –≠—Ñ—Ñ–µ–∫—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    with st.chat_message("assistant", avatar="ü§ñ"):
        with st.spinner("–î—É–º–∞—é..."):
            # –ö–æ–º–∞–Ω–¥—ã
            if user_input.startswith('/tasks'):
                tasks = await task_service.get_active_tasks_for_chat(DEMO_CHAT_ID)
                if not tasks:
                    response_text = "üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!"
                else:
                    response_lines = ["<b>üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>"]
                    for task in tasks:
                        deadline_str = f" (–¥–æ {task.deadline.strftime('%d.%m.%Y')})" if task.deadline else ""
                        assignees_str = f" {task.assignees}" if task.assignees else ""
                        response_lines.append(f"‚Ä¢ <code>#{task.id}</code>: {task.title}{assignees_str}{deadline_str}")
                    response_text = "\n".join(response_lines)
                st.session_state.history.append({"role": "bot", "content": response_text, "html": True})

            elif user_input.startswith('/close'):
                try:
                    task_id = int(user_input.split()[1])
                    closed_task = await task_service.close_task(task_id, DEMO_CHAT_ID)
                    if closed_task:
                        response_text = f"‚úÖ –ó–∞–¥–∞—á–∞ <code>#{task_id}</code>: \"{closed_task.title}\" –∑–∞–∫—Ä—ã—Ç–∞."
                    else:
                        response_text = f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É —Å ID <code>#{task_id}</code>."
                    st.session_state.history.append({"role": "bot", "content": response_text, "html": True})
                except (IndexError, ValueError):
                    st.session_state.history.append({"role": "bot", "content": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä: `/close 14`"})
            
            # LLM-—Ä–æ—É—Ç–µ—Ä
            else:
                intent = await llm_router.classify_intent(user_input)
                if intent == Intent.FAQ_QUESTION:
                    context = await faq_service.find_similar_faq(user_input)
                    answer = await faq_service.generate_answer_from_context(user_input, context)
                    st.session_state.history.append({"role": "bot", "content": answer})
                # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ. –ü–æ–∫–∞ –¥–ª—è –¥–µ–º–æ —ç—Ç–æ–≥–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ.
                else:
                    st.session_state.history.append({"role": "bot", "content": "–Ø –ø–æ–∫–∞ –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã –≤ —ç—Ç–æ–π –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏, –Ω–æ —è –ø–æ–Ω—è–ª, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ. üòä"})


# --- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ ---
for msg in st.session_state.history:
    if msg["role"] == "user":
        with st.chat_message("user", avatar="üßë‚Äçüíª"):
            st.write(f"**{msg['name']}**")
            st.write(msg["content"])
    elif msg["role"] == "bot_summary":
        st.info(msg["content"], icon="‚ÑπÔ∏è")
    elif msg["role"] == "bot":
        with st.chat_message("assistant", avatar="ü§ñ"):
            st.write(msg["content"], unsafe_allow_html=msg.get("html", False))

# --- –ü–æ–ª–µ –≤–≤–æ–¥–∞ ---
# –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –æ—à–∏–±–∫—É
user_input = st.chat_input("–°–ø—Ä–æ—Å–∏—Ç–µ —á—Ç–æ-–Ω–∏–±—É–¥—å —É –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞...")
if user_input:
    asyncio.run(process_user_input(user_input))
    # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É, —á—Ç–æ–±—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –æ—Ç–≤–µ—Ç
    st.rerun()