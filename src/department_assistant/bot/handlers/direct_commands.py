# src/department_assistant/bot/handlers/direct_commands.py
from aiogram import Router
from aiogram.filters import Command, CommandObject
from aiogram.types import Message
import logging
from aiogram import F, Router, Bot  # <--- –î–û–ë–ê–í–õ–Ø–ï–ú F –°–Æ–î–ê
import io  
from pathlib import Path 

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –Ω–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
from ...storage.database import check_postgres
from ...storage.s3_storage import check_minio
from ...services.faq_service import add_faq_entry
from ...services.document_parser import parse_document
from ...storage.s3_storage import minio_client
from ...services.task_service import get_active_tasks_for_chat, close_task
from datetime import datetime

router = Router()


@router.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø DepartmentAssistant. –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /healthcheck")


@router.message(Command("add_faq"))
async def cmd_add_faq(message: Message, command: CommandObject):
    if not command.args:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π.\n"
                             "–ü—Ä–∏–º–µ—Ä: `/add_faq –ö–∞–∫–æ–≤–∞ —Ñ–æ—Ä–º–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞–º?`")
        return

    faq_text = command.args
    try:
        await add_faq_entry(faq_text)
        await message.answer("‚úÖ –ù–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π!")
    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è —Å–µ–±—è
        logging.error(f"Failed to add FAQ entry: {e}", exc_info=True)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–æ—Å—Ç–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω.")

@router.message(Command("healthcheck"))
async def cmd_healthcheck(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–æ–≤
    is_postgres_ok = await check_postgres()
    is_minio_ok = await check_minio()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    postgres_status = "‚úÖ OK" if is_postgres_ok else "‚ùå FAILED"
    minio_status = "‚úÖ OK" if is_minio_ok else "‚ùå FAILED"

    report = (
        "<b>ü©∫ Health Check Report:</b>\n\n"
        f"PostgreSQL: {postgres_status}\n"
        f"MinIO (S3): {minio_status}"
    )

    await message.answer(report, parse_mode="HTML")

@router.message(F.document & F.caption)
async def handle_document_upload(message: Message, bot: Bot):
    if not message.caption.lower().startswith("–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ –±–∞–∑—É"):
        return # –†–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —è–≤–Ω—É—é –∫–æ–º–∞–Ω–¥—É –≤ –ø–æ–¥–ø–∏—Å–∏

    document = message.document
    file_info = await bot.get_file(document.file_id)
    file_content = await bot.download_file(file_info.file_path)
    
    file_path = Path(document.file_name)
    
    await message.reply(f"üìÑ –ü–æ–ª—É—á–∏–ª —Ñ–∞–π–ª '{file_path.name}'. –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É...")

    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ MinIO
    bucket_name = "documents"
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –±–∞–∫–µ—Ç, –∏ —Å–æ–∑–¥–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç
    if not minio_client.bucket_exists(bucket_name):
        minio_client.make_bucket(bucket_name)

    minio_client.put_object(
        bucket_name=bucket_name,
        object_name=file_path.name,
        data=io.BytesIO(file_content.read()),
        length=file_info.file_size
    )
    
    # 2. –ü–∞—Ä—Å–∏–º –¥–æ–∫—É–º–µ–Ω—Ç –∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
    chunks = parse_document(file_path, file_content.getvalue())
    if not chunks:
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞ –∏–ª–∏ —Ç–∏–ø —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        return

    # 3. –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
    try:
        for i, chunk in enumerate(chunks):
            # –î–æ–±–∞–≤–ª—è–µ–º –∫ —Ç–µ–∫—Å—Ç—É —á–∞–Ω–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–± –∏—Å—Ç–æ—á–Ω–∏–∫–µ
            chunk_with_source = f"–ò—Å—Ç–æ—á–Ω–∏–∫: {file_path.name}\n\n{chunk}"
            await add_faq_entry(chunk_with_source)
        
        await message.reply(f"‚úÖ –§–∞–π–ª '{file_path.name}' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π ({len(chunks)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤).")
    except Exception as e:
        await message.reply(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑—É: {e}")

@router.message(Command("tasks"))
async def cmd_tasks(message: Message):
    tasks = await get_active_tasks_for_chat(message.chat.id)
    if not tasks:
        await message.reply("üéâ –í—Å–µ –∑–∞–¥–∞—á–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã! –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!")
        return

    response_lines = ["<b>üìù –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:</b>\n"]
    for task in tasks:
        deadline_str = ""
        if task.deadline:
            is_overdue = task.deadline < datetime.now(task.deadline.tzinfo)
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            deadline_formatted = task.deadline.strftime('%d.%m.%Y')
            deadline_str = f" (–¥–æ {deadline_formatted}){'‚ùóÔ∏è' if is_overdue else ''}"

        assignees_str = f" {task.assignees}" if task.assignees else ""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–≥ <code> –¥–ª—è ID –∑–∞–¥–∞—á–∏
        response_lines.append(f"‚Ä¢ <code>#{task.id}</code>: {task.title}{assignees_str}{deadline_str}")
    
    # –ú–µ–Ω—è–µ–º parse_mode –Ω–∞ HTML
    await message.reply("\n".join(response_lines), parse_mode="HTML")


@router.message(Command("close"))
async def cmd_close_task(message: Message, command: CommandObject):
    if not command.args or not command.args.isdigit():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å.\n–ü—Ä–∏–º–µ—Ä: `/close 42`")
        return
    
    task_id = int(command.args)
    closed_task = await close_task(task_id, message.chat.id)

    if closed_task:
        await message.reply(f"‚úÖ –ó–∞–¥–∞—á–∞ `#{task_id}`: \"{closed_task.title}\" –∑–∞–∫—Ä—ã—Ç–∞.")
    else:
        await message.reply(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –∑–∞–¥–∞—á—É —Å ID `#{task_id}` –≤ —ç—Ç–æ–º —á–∞—Ç–µ.")